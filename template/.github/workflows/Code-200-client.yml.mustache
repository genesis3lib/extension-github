name: Code-200-Client
on:
  push:
  workflow_dispatch:

permissions:
  contents: write
  checks: write
  id-token: write

env:
  TF_VERSION: "1.12.2"
  AWS_REGION: {{region}}

jobs:
  client-operations:
    runs-on: ubuntu-latest
    steps:
      - name: Version of AWS CLI
        run: |
          echo "AWS CLI version:"
          which aws
          aws --version

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Env setup
        run: |
          
          # Set environment variables
          echo "BRANCH={{{githubVarsOpen}}} github.ref_name  {{{githubVarsClose}}}" >> $GITHUB_ENV
          if [[ "{{{githubVarsOpen}}} github.ref_name  {{{githubVarsClose}}}" = "main" || "{{{githubVarsOpen}}} github.ref_name  {{{githubVarsClose}}}" = "production" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          else
            BRANCH_ENV=$(echo "{{{githubVarsOpen}}} github.ref_name  {{{githubVarsClose}}}" | sed "s///-/g")
            echo "ENVIRONMENT=$BRANCH_ENV" >> $GITHUB_ENV
          fi
          
          echo "‚úÖ Environment setup completed: {{{githubVarsOpen}}} github.ref_name  {{{githubVarsClose}}}"

      - name: Credential for AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::{{{githubVarsOpen}}} vars.AWS_ACCOUNT_ID {{{githubVarsClose}}}:role/{{projectName}}-{{{githubVarsOpen}}} env.ENVIRONMENT  {{{githubVarsClose}}}-ops-deploy-s3-role
          aws-region: {{{githubVarsOpen}}} env.AWS_REGION  {{{githubVarsClose}}}

      - name: Setup Environment Info
        run: |
          echo "Event name: {{{githubVarsOpen}}} github.event_name  {{{githubVarsClose}}}"
          echo "Branch: {{{githubVarsOpen}}} env.BRANCH  {{{githubVarsClose}}}"
          echo "Environment: {{{githubVarsOpen}}} env.ENVIRONMENT  {{{githubVarsClose}}}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: {{{githubVarsOpen}}} env.TF_VERSION  {{{githubVarsClose}}}
          terraform_wrapper: false

      - name: Get Terraform Outputs
        run: |
          cd {{id}}/terraform
          echo "üîç Getting Terraform outputs for {{{githubVarsOpen}}} env.ENVIRONMENT  {{{githubVarsClose}}} environment..."
          
          # Initialize Terraform to access state
          terraform init -backend-config=backend-${ENVIRONMENT}.hcl -input=false
          
          # Get the S3 bucket and CloudFront distribution from Terraform outputs
          S3_BUCKET=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "")
          CF_DISTRIBUTION=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
          
          if [ -z "$S3_BUCKET" ]; then
            echo "‚ùå Could not get S3 bucket from Terraform outputs"
            echo "üîç Available Terraform outputs:"
            terraform output
            echo "‚ö†Ô∏è Infrastructure may not be deployed yet - run deploy_apply first"
            exit 1
          fi
          
          if [ -z "$CF_DISTRIBUTION" ]; then
            echo "‚ùå Could not get CloudFront distribution from Terraform outputs"
            echo "üîç Available Terraform outputs:"
            terraform output
            echo "‚ö†Ô∏è Infrastructure may not be deployed yet - run deploy_apply first"
            exit 1
          fi
          
          echo "‚úÖ Found S3 bucket: $S3_BUCKET"
          echo "‚úÖ Found CloudFront distribution: $CF_DISTRIBUTION"
          echo "AWS_S3_TARGET=$S3_BUCKET" >> $GITHUB_ENV
          echo "CLOUDFRONT_TARGET=$CF_DISTRIBUTION" >> $GITHUB_ENV
          
          echo "Target S3: $S3_BUCKET"
          echo "Target CloudFront: $CF_DISTRIBUTION"
        env:
          AWS_DEFAULT_REGION: {{{githubVarsOpen}}} env.AWS_REGION  {{{githubVarsClose}}}

      - name: Check for package-lock.json
        id: check-lockfile
        run: |
          cd {{frontendModule.id}}
          if [ -f "package-lock.json" ]; then
            echo "lockfile-exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ package-lock.json found - caching will be enabled"
          else
            echo "lockfile-exists=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è package-lock.json not found - skipping cache"
          fi

      - name: Setup Node.js (with cache)
        if: steps.check-lockfile.outputs.lockfile-exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: '{{frontendModule.id}}/package-lock.json'

      - name: Setup Node.js (without cache)
        if: steps.check-lockfile.outputs.lockfile-exists == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Build
        run: |
          cd {{frontendModule.id}}
          ls -lart
          pwd
          node -v
          npm -v
          npm install
          npx update-browserslist-db@latest
          # Use environment-specific build script
          if [ "{{{githubVarsOpen}}} env.ENVIRONMENT  {{{githubVarsClose}}}" = "production" ]; then
            echo "üî® Running production build..."
            CI=false npm run build:production
          else
            echo "üî® Running development build..."
            CI=false npm run build
          fi

      - name: Check and commit generated package-lock.json
        run: |
          cd {{frontendModule.id}}
          
          # Check if package-lock.json was generated during build
          if [ -f "package-lock.json" ] && [ "${{{githubVarsOpen}}}steps.check-lockfile.outputs.lockfile-exists{{{githubVarsClose}}}" = "false" ]; then
            echo "üì¶ package-lock.json was generated during build process"
            echo "üîÑ Committing package-lock.json to repository..."
            
            
            # Add and commit the generated package-lock.json
            git add package-lock.json
            if git diff --cached --quiet; then
              echo "‚ÑπÔ∏è No changes to commit"
            else
              echo "üîÑ package-lock.json was generated during build, committing changes..."

              # Configure git for the action
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"

              git commit -m "ü§ñ generated package-lock.json from build process"
              
              # Push the commit back to the repository
              git push
              echo "‚úÖ package-lock.json committed and pushed successfully"
            fi
          elif [ -f "package-lock.json" ] && [ "${{{githubVarsOpen}}}steps.check-lockfile.outputs.lockfile-exists{{{githubVarsClose}}}" = "true" ]; then
            echo "‚ÑπÔ∏è package-lock.json already existed and may have been updated during build"
            
            # Check if there are changes to the existing package-lock.json
            if git diff --quiet package-lock.json; then
              echo "‚úÖ No changes to existing package-lock.json"
            else
              echo "üîÑ package-lock.json was modified during build, committing changes..."
              
              # Configure git for the action
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              
              # Add and commit the updated package-lock.json
              git add package-lock.json
              git commit -m "ü§ñ updated package-lock.json from build process"
              
              # Push the commit back to the repository
              git push
              echo "‚úÖ Updated package-lock.json committed and pushed successfully"
            fi
          else
            echo "‚ÑπÔ∏è No package-lock.json found after build - nothing to commit"
          fi

      - name: Deploy - Sync S3 Bucket
        run: |
          echo "Deploying to ${AWS_S3_TARGET} [${CLOUDFRONT_TARGET}]"
          aws s3 sync {{frontendModule.id}}/dist "s3://${AWS_S3_TARGET}" --region {{{githubVarsOpen}}} env.AWS_REGION  {{{githubVarsClose}}} --delete

      - name: Deploy - Invalidate CloudFront cache
        run: |
          echo "Invalidating CloudFront distribution cache for ${CLOUDFRONT_TARGET}"
          aws cloudfront create-invalidation --distribution-id "${CLOUDFRONT_TARGET}" --paths "/*"

